#ref.group = 'FN-RMS',
size = 6,
label.y.npc = 0.91,
label.x.npc = 0.4) +
NoLegend()
}
ggarrange(plot[[1]], plot[[2]], plot[[3]], plot[[4]], ncol=4)
ggsave(file.path(analysis_dir, paste0("26_Vln_plot_eRMS8.pdf")), width=15, height=5.5, dpi=300)
## Violin plots
for (a in 1:length(scores)) {
plot[[a]] <- VlnPlot(eRMS8,
features = scores[[a]],
group.by = 'name',
#sort = 'decreasing',
pt.size=0,
cols = col_subtype) +
labs (y='Module score, AU', x='', title = scores[a]) +
scale_fill_manual(values = c('grey80', 'grey20', 'grey20'))  +
scale_fill_manual(values = c('grey80', 'grey20', 'grey20')) +
geom_boxplot(outlier.shape=NA, width=0.1, fill="white") + NoLegend() +
theme_vln +
stat_compare_means(aes(label = after_stat(p.format)),
method = 't.test',
#ref.group = 'FN-RMS',
size = 6,
label.y.npc = 0.91,
label.x.npc = 0.4) +
NoLegend()
}
ggarrange(plot[[1]], plot[[2]], plot[[3]], plot[[4]], ncol=4)
ggsave(file.path(analysis_dir, paste0("26_Vln_plot_eRMS8.pdf")), width=15, height=5.5, dpi=300)
plot <- list()
## Violin plots
for (a in 1:length(scores)) {
plot[[a]] <- VlnPlot(eRMS8,
features = scores[[a]],
group.by = 'name',
#sort = 'decreasing',
pt.size=0,
cols = col_subtype) +
labs (y='Module score, AU', x='', title = scores[a]) +
scale_fill_manual(values = c('grey80', 'grey20', 'grey20'))  +
scale_fill_manual(values = c('grey80', 'grey20', 'grey20')) +
geom_boxplot(outlier.shape=NA, width=0.1, fill="white") + NoLegend() +
theme_vln +
stat_compare_means(aes(label = after_stat(p.format)),
#method = 't.test',
#ref.group = 'FN-RMS',
size = 6,
label.y.npc = 0.91,
label.x.npc = c(0.2, 0.6)) +
NoLegend()
}
ggarrange(plot[[1]], plot[[2]], plot[[3]], plot[[4]], ncol=4)
ggsave(file.path(analysis_dir, paste0("26_Vln_plot_eRMS8.pdf")), width=15, height=5.5, dpi=300)
## Violin plots
for (a in 1:length(scores)) {
plot[[a]] <- VlnPlot(eRMS8,
features = scores[[a]],
group.by = 'name',
#sort = 'decreasing',
pt.size=0,
cols = col_subtype) +
labs (y='Module score, AU', x='', title = scores[a]) +
scale_fill_manual(values = c('grey80', 'grey20', 'grey20'))  +
scale_fill_manual(values = c('grey80', 'grey20', 'grey20')) +
geom_boxplot(outlier.shape=NA, width=0.1, fill="white") + NoLegend() +
theme_vln +
stat_compare_means(aes(label = after_stat(p.format)),
comparisons = list(c("eRMS-8.1", "eRMS-8.2"), c("eRMS-8.1", "eRMS-8.3")),
size = 6,
label.y.npc = 0.91,
label.x.npc = c(0.2, 0.6)) +
NoLegend()
}
ggarrange(plot[[1]], plot[[2]], plot[[3]], plot[[4]], ncol=4)
ggsave(file.path(analysis_dir, paste0("26_Vln_plot_eRMS8.pdf")), width=15, height=5.5, dpi=300)
plot <- list()
## Violin plots
for (a in 1:length(scores)) {
plot[[a]] <- VlnPlot(eRMS8,
features = scores[[a]],
group.by = 'name',
#sort = 'decreasing',
pt.size=0,
cols = col_subtype) +
labs (y='Module score, AU', x='', title = scores[a]) +
scale_fill_manual(values = c('grey80', 'grey20', 'grey20'))  +
scale_fill_manual(values = c('grey80', 'grey20', 'grey20')) +
geom_boxplot(outlier.shape=NA, width=0.1, fill="white") + NoLegend() +
theme_vln +
stat_compare_means(aes(label = after_stat(p.format)),
comparisons = list(c("eRMS-8.1", "eRMS-8.2"), c("eRMS-8.1", "eRMS-8.3")), label.y = c(29, 35, 40),
size = 6,
label.y.npc = 0.91,
label.x.npc = c(0.2, 0.6)) +
NoLegend()
}
ggarrange(plot[[1]], plot[[2]], plot[[3]], plot[[4]], ncol=4)
ggsave(file.path(analysis_dir, paste0("26_Vln_plot_eRMS8.pdf")), width=15, height=5.5, dpi=300)
plot <- list()
## Violin plots
for (a in 1:length(scores)) {
plot[[a]] <- VlnPlot(eRMS8,
features = scores[[a]],
group.by = 'name',
#sort = 'decreasing',
pt.size=0,
cols = col_subtype) +
labs (y='Module score, AU', x='', title = scores[a]) +
scale_fill_manual(values = c('grey80', 'grey20', 'grey20'))  +
scale_fill_manual(values = c('grey80', 'grey20', 'grey20')) +
geom_boxplot(outlier.shape=NA, width=0.1, fill="white") + NoLegend() +
theme_vln +
stat_compare_means(aes(label = after_stat(p.format)),
#comparisons = list(c("eRMS-8.1", "eRMS-8.2"), c("eRMS-8.1", "eRMS-8.3")),
method = "t.test", ref.group = "eRMS-8.1"
size = 6,
ggarrange(plot[[1]], plot[[2]], plot[[3]], plot[[4]], ncol=4)
ggsave(file.path(analysis_dir, paste0("26_Vln_plot_eRMS8.pdf")), width=15, height=5.5, dpi=300)
plot <- list()
## Violin plots
for (a in 1:length(scores)) {
plot[[a]] <- VlnPlot(eRMS8,
features = scores[[a]],
group.by = 'name',
#sort = 'decreasing',
pt.size=0,
cols = col_subtype) +
labs (y='Module score, AU', x='', title = scores[a]) +
scale_fill_manual(values = c('grey80', 'grey20', 'grey20'))  +
scale_fill_manual(values = c('grey80', 'grey20', 'grey20')) +
geom_boxplot(outlier.shape=NA, width=0.1, fill="white") + NoLegend() +
theme_vln +
stat_compare_means(aes(label = after_stat(p.format)),
#comparisons = list(c("eRMS-8.1", "eRMS-8.2"), c("eRMS-8.1", "eRMS-8.3")),
method = "t.test", ref.group = "eRMS-8.1"
size = 6,
plot <- list()
## Violin plots
for (a in 1:length(scores)) {
plot[[a]] <- VlnPlot(eRMS8,
features = scores[[a]],
group.by = 'name',
#sort = 'decreasing',
pt.size=0,
cols = col_subtype) +
labs (y='Module score, AU', x='', title = scores[a]) +
scale_fill_manual(values = c('grey80', 'grey20', 'grey20'))  +
scale_fill_manual(values = c('grey80', 'grey20', 'grey20')) +
geom_boxplot(outlier.shape=NA, width=0.1, fill="white") + NoLegend() +
theme_vln +
stat_compare_means(aes(label = after_stat(p.format)),
#comparisons = list(c("eRMS-8.1", "eRMS-8,.2"), c("eRMS-8.1", "eRMS-8.3")),
method = "t.test", ref.group = "eRMS-8.1"
size = 6,
plot <- list()
## Violin plots
for (a in 1:length(scores)) {
plot[[a]] <- VlnPlot(eRMS8,
features = scores[[a]],
group.by = 'name',
#sort = 'decreasing',
pt.size=0,
cols = col_subtype) +
labs (y='Module score, AU', x='', title = scores[a]) +
scale_fill_manual(values = c('grey80', 'grey20', 'grey20'))  +
scale_fill_manual(values = c('grey80', 'grey20', 'grey20')) +
geom_boxplot(outlier.shape=NA, width=0.1, fill="white") + NoLegend() +
theme_vln +
stat_compare_means(aes(label = after_stat(p.format)),
#comparisons = list(c("eRMS-8.1", "eRMS-8,.2"), c("eRMS-8.1", "eRMS-8.3")),
method = "t.test", ref.group = "eRMS-8.1",
size = 6,
label.y.npc = 0.91,
label.x.npc = c(0.2, 0.6)) +
NoLegend()
}
ggarrange(plot[[1]], plot[[2]], plot[[3]], plot[[4]], ncol=4)
ggsave(file.path(analysis_dir, paste0("26_Vln_plot_eRMS8.pdf")), width=15, height=5.5, dpi=300)
plot <- list()
## Violin plots
for (a in 1:length(scores)) {
plot[[a]] <- VlnPlot(eRMS8,
features = scores[[a]],
group.by = 'name',
#sort = 'decreasing',
pt.size=0,
cols = col_subtype) +
labs (y='Module score, AU', x='', title = scores[a]) +
scale_fill_manual(values = c('grey80', 'grey20', 'grey20'))  +
scale_fill_manual(values = c('grey80', 'grey20', 'grey20')) +
geom_boxplot(outlier.shape=NA, width=0.1, fill="white") + NoLegend() +
theme_vln +
stat_compare_means(aes(label = after_stat(p.format)),
#comparisons = list(c("eRMS-8.1", "eRMS-8,.2"), c("eRMS-8.1", "eRMS-8.3")),
method = "t.test", ref.group = "eRMS-8.1",
size = 4,
label.y.npc = 0.91,
label.x.npc = c(0.2, 0.6)) +
NoLegend()
}
ggarrange(plot[[1]], plot[[2]], plot[[3]], plot[[4]], ncol=4)
ggsave(file.path(analysis_dir, paste0("26_Vln_plot_eRMS8.pdf")), width=15, height=5.5, dpi=300)
plot <- list()
## Violin plots
for (a in 1:length(scores)) {
plot[[a]] <- VlnPlot(eRMS8,
features = scores[[a]],
group.by = 'name',
#sort = 'decreasing',
pt.size=0,
cols = col_subtype) +
labs (y='Module score, AU', x='', title = scores[a]) +
scale_fill_manual(values = c('grey80', 'grey20', 'grey20'))  +
scale_fill_manual(values = c('grey80', 'grey20', 'grey20')) +
geom_boxplot(outlier.shape=NA, width=0.1, fill="white") + NoLegend() +
theme_vln +
stat_compare_means(aes(label = after_stat(p.format)),
#comparisons = list(c("eRMS-8.1", "eRMS-8,.2"), c("eRMS-8.1", "eRMS-8.3")),
method = "t.test", ref.group = "eRMS-8.1",
size = 5,
label.y.npc = 0.91,
label.x.npc = c(0.2, 0.6)) +
NoLegend()
}
ggarrange(plot[[1]], plot[[2]], plot[[3]], plot[[4]], ncol=4)
ggsave(file.path(analysis_dir, paste0("26_Vln_plot_eRMS8.pdf")), width=15, height=5.5, dpi=300)
# VlnPlot SJRHB000026_X1 and _X2   -------------------------------------
Idents(FNRMS) <- 'name'
SJRHB000026_X1 <- subset(FNRMS, idents = c("SJRHB000026_X1", "SJRHB000026_X2"))
## Violin plots
plot <- list()
for (a in 1:length(scores)) {
plot[[a]] <- VlnPlot((FNRMS),
features = scores[[a]],
group.by = 'name',
#sort = 'decreasing',
pt.size=0,
cols = col_subtype) +
labs (y='Module score, AU', x='', title = scores[a]) +
scale_fill_manual(values = c('grey80', 'grey20'))  +
scale_fill_manual(values = c('grey80', 'grey20')) +
geom_boxplot(outlier.shape=NA, width=0.1, fill="white") + NoLegend() +
theme_vln +
stat_compare_means(aes(label = after_stat(p.format)),
method = 't.test',
#ref.group = 'FN-RMS',
size = 6,
label.y.npc = 0.91,
label.x.npc = 0.4) +
NoLegend()
}
## Violin plots
plot <- list()
for (a in 1:length(scores)) {
plot[[a]] <- VlnPlot(SJRHB000026_X1,
features = scores[[a]],
group.by = 'name',
#sort = 'decreasing',
pt.size=0,
cols = col_subtype) +
labs (y='Module score, AU', x='', title = scores[a]) +
scale_fill_manual(values = c('grey80', 'grey20'))  +
scale_fill_manual(values = c('grey80', 'grey20')) +
geom_boxplot(outlier.shape=NA, width=0.1, fill="white") + NoLegend() +
theme_vln +
stat_compare_means(aes(label = after_stat(p.format)),
method = 't.test',
#ref.group = 'FN-RMS',
size = 6,
label.y.npc = 0.91,
label.x.npc = 0.4) +
NoLegend()
}
ggarrange(plot[[1]], plot[[2]], plot[[3]], plot[[4]], ncol=4)
ggsave(file.path(analysis_dir, paste0("26_Vln_plot_SJRHB000026_X1.pdf")), width=15, height=5.5, dpi=300)
ggsave(file.path(analysis_dir, paste0("26_Vln_plot_SJRHB000026_X1.pdf")), width=12, height=5.5, dpi=300)
eRMS8
SJRHB000026_X1
rm(list = ls())
library(dplyr)
library(Seurat)
library(ggplot2)
library(patchwork)
library(readxl)
library(writexl)
library(data.table)
library(viridis)
library(future)
library(paletteer)
library(SeuratObject)
library(SCpubr)
RMS.integrated <- readRDS(file.path(base_dir, "write/RMS_atlas_final_20240130.rds"))
library(readxl)
library(clustree)
library(cowplot)
base_dir <- '/Volumes/Sara_PhD/scRNAseq_data'
list_dir <- '/Volumes/Sara_PhD/scRNAseq_data/list_final'
resource_dir <- file.path('/Users/sdaniell/Dropbox (Partners HealthCare)/Sara Danielli/Manuscripts/2023 - Meta-data/GITHUB/RMS-metadata/Resources')
source(file.path(base_dir, "codes/MANUSCRIPT_INTEGRATION/metadata/FINAL/Functions.R"))
source(file.path(resource_dir, "Plot_style_v2.R"))
analysis_dir <- file.path(base_dir, 'output/metadata/Patel_Danielli_Langenau/RPCA_name/analysis')
if (!dir.exists(analysis_dir)){dir.create(analysis_dir, recursive = T)}
genelist_dir <- file.path(base_dir, 'list_final')
## read file
#PDX.integrated <- readRDS(file.path(base_dir, "write/Danielli_Patel_Langenau_20230710.rds"))
PDX.integrated <- readRDS(file.path(base_dir, "write/Danielli_Patel_Langenau_RPCA_20230202_scoring100.rds"))
DefaultAssay(PDX.integrated) <- "integrated"
## Define colors
# Color model
col_model <- c("#009B9EFF","#A7D3D4FF",  "#E4C1D9FF","#C75DABFF")
# Color origin
col_origin <- paletteer::paletteer_d("ggthemes::excel_Slice", n=4)
# Color name
col_aRMS <- paletteer::paletteer_c("ggthemes::Blue-Teal", n = 27)
col_eRMS <- paletteer::paletteer_c("ggthemes::Purple", n = 47)
col_name <- c(col_aRMS, col_eRMS)
# Color subtype
col_subtype <- c('#D3A2C2FF', '#95CECFFF')
col_fusion <- c('#D3A2C2FF', '#D3A2C2FF', '#95CECFFF', 'darkblue')
# Color Louvain clusters
col_cluster_names =  paletteer::paletteer_d("rcartocolor::Pastel", n = 12)
col_cluster_names_aggregate <- c("#276419FF","#7FBC41FF", '#FFAD72FF', '#FFE5CCFF', "#DE77AEFF", "#8E0152FF", '#D8D8E0FF')
## Order factors
PDX.integrated$origin <- factor(x = PDX.integrated$origin, levels = c("Wei et al.", "Patel et al.", "Danielli et al.", "Weng et al."))
PDX.integrated$model <- factor(x = PDX.integrated$model, levels = c("Patient", "O-PDX", "Primary culture", "Cell line"))
PDX.integrated$subtype <- factor(x = PDX.integrated$subtype, levels = c("eRMS", "aRMS"))
PDX.integrated$name <- factor(x = PDX.integrated$name, levels = c('20082',  'aRMS-1',  'aRMS-2', 'aRMS-3',
'aRMS-4',  'aRMS-5', 'KFR', 'Mast118',
'Mast95', 'MSK72117', 'MSK72117_SC',
'MSK82489', 'Rh4',  'Rh41',   'RMS',
'SJRHB010468_D1',  'SJRHB010468_X1', 'SJRHB013757_D2',
'SJRHB013757_X1', 'SJRHB013759_A1',  'SJRHB013759_A2',
'SJRHB013759_X14','SJRHB013759_X15', 'SJRHB031320_D1',
'SJRHB031320_X1', 'SJRHB046156_A1', 'SJRHB046156_X1',
'20696','21202', '29806',
'eRMS-1.1','eRMS-1.2',  'eRMS-2.1', 'eRMS-2.2',
'eRMS-3.2','eRMS-4',  'eRMS-8.1', 'eRMS-8.2',
'eRMS-8.3', 'Mast111','Mast139',  'Mast139_SC',
'Mast39',   'Mast85_r1','Mast85_r2',
'Mast85_r2_SC', 'MSK74711', 'RD', 'SJRHB000026_R2',  'SJRHB000026_R3',  'SJRHB000026_X1',
'SJRHB000026_X2', 'SJRHB010927_D1', 'SJRHB010927_X1',
'SJRHB010928_R1', 'SJRHB010928_X1',  'SJRHB011_D',
'SJRHB011_X', 'SJRHB012_R', 'SJRHB012_S', 'SJRHB012_Y',
'SJRHB012_Z', 'SJRHB012405_D1', 'SJRHB012405_X1',  'SJRHB013758_D1',
'SJRHB013758_D2', 'SJRHB013758_X1', 'SJRHB013758_X2',  'SJRHB030680_R1',
'SJRHB030680_X1', 'SJRHB049189_D1', 'SJRHB049189_X1'))
PDX.integrated$cluster_names <- factor(x = PDX.integrated$cluster_names,
levels = c('8-Progenitor','1-TR-progenitor', '3-Proliferative', '2-DNA replication',  '5-DNA replication',
'10-DNA replication', '4-Ground','0-Ground', '11-Ground','6-TR-differentiated',  '9-Differentiated', '7-Apoptosis'))
PDX.integrated$cluster_names_aggregate <- factor(x = PDX.integrated$cluster_names_aggregate,
levels = c('Progenitor','TR-progenitor', 'Proliferative', 'Ground', 'TR-differentiated', 'Differentiated', 'Apoptosis'))
PDX.integrated$seurat_clusters <- factor(x = PDX.integrated$seurat_clusters, levels = c('8', '1',  '3', '2', '5', '10', '4', '0', '11', '6', '9', '7'))
RMS.integrated <- readRDS(file.path(base_dir, "write/RMS_atlas_final_20240130.rds"))
PDX.integrated
# UMAP plot with cluster names
DimPlot(PDX.integrated, reduction = "umap_rpca",  label = FALSE, cols = col_cluster_names, pt.size = 2, raster=TRUE, raster.dpi = c(1012, 1012), shuffle=TRUE) + NoLegend() + NoAxes()
DimPlot(PDX.integrated, reduction = "umap_rpca",  label = 1, cols = col_cluster_names, pt.size = 2, raster=TRUE, raster.dpi = c(1012, 1012), shuffle=TRUE) + NoLegend() + NoAxes()
DimPlot(PDX.integrated, reduction = "umap_rpca",  label = 1, cols = col_cluster_names, pt.size = 2, raster=TRUE, raster.dpi = c(1012, 1012), shuffle=TRUE) + NoAxes()
# UMAP plot with cluster names
DimPlot(PDX.integrated, reduction = "umap_rpca",  label = FALSE, cols = col_cluster_names, pt.size = 2, raster=TRUE, raster.dpi = c(1012, 1012), shuffle=TRUE) + NoLegend() + NoAxes()
ggsave(file.path(analysis_dir, "7_UMAP_clusters_name.pdf"), width=4, height=4, dpi=300)
DimPlot(PDX.integrated, reduction = "umap_rpca",  label = 1, cols = col_cluster_names, pt.size = 2, raster=TRUE, raster.dpi = c(1012, 1012), shuffle=TRUE) + NoLegend() + NoAxes()
ggsave(file.path(analysis_dir, "7_UMAP_clusters_labels_name.pdf"), width=4, height=4, dpi=300)
DimPlot(PDX.integrated, reduction = "umap_rpca",  label = 1, cols = col_cluster_names, pt.size = 2, raster=TRUE, raster.dpi = c(1012, 1012), shuffle=TRUE) + NoAxes()
ggsave(file.path(analysis_dir, "7_UMAP_clusters_legend_name.pdf"), width=5.5, height=4, dpi=300)
# UMAP plot with cluster names (aggregate)
DimPlot(PDX.integrated, reduction = "umap_rpca",  label = 0, cols = col_cluster_names_aggregate, pt.size = 2, raster=TRUE, raster.dpi = c(1012, 1012), shuffle=TRUE)  + NoAxes()
DimPlot(PDX.integrated, reduction = "umap_rpca",  label = 0, cols = col_cluster_names_aggregate, pt.size = 2, raster=TRUE, raster.dpi = c(1012, 1012), shuffle=TRUE) + NoLegend() + NoAxes()
# UMAP plot with cluster names
DimPlot(PDX.integrated, reduction = "umap_rpca",  label = FALSE, cols = col_cluster_names, pt.size = 2, raster=TRUE, raster.dpi = c(1012, 1012), shuffle=TRUE) + NoLegend() + NoAxes()
col_cluster_names_aggregate
PDX.integrated <- readRDS(file.path(base_dir, "write/RMS_atlas_final_20240130.rds"))
rm(list = ls())
library(dplyr)
library(Seurat)
library(ggplot2)
library(patchwork)
library(readxl)
library(writexl)
library(data.table)
library(viridis)
library(future)
library(paletteer)
library(SeuratObject)
library(SCpubr)
library(readxl)
library(clustree)
library(cowplot)
base_dir <- '/Volumes/Sara_PhD/scRNAseq_data'
list_dir <- '/Volumes/Sara_PhD/scRNAseq_data/list_final'
resource_dir <- file.path('/Users/sdaniell/Dropbox (Partners HealthCare)/Sara Danielli/Manuscripts/2023 - Meta-data/GITHUB/RMS-metadata/Resources')
source(file.path(base_dir, "codes/MANUSCRIPT_INTEGRATION/metadata/FINAL/Functions.R"))
source(file.path(resource_dir, "Plot_style_v2.R"))
analysis_dir <- file.path(base_dir, 'output/metadata/Patel_Danielli_Langenau/RPCA_name/analysis')
if (!dir.exists(analysis_dir)){dir.create(analysis_dir, recursive = T)}
genelist_dir <- file.path(base_dir, 'list_final')
PDX.integrated <- readRDS(file.path(base_dir, "write/RMS_atlas_final_20240130.rds"))
# UMAP plot Louvain clusters
DimPlot(PDX.integrated, reduction = "umap_rpca",  label = FALSE, cols = col_cluster_names, pt.size = 2, raster=TRUE, raster.dpi = c(1012, 1012)) + NoLegend() + NoAxes()
## Define colors
# Color model
col_model <- c("#009B9EFF","#A7D3D4FF",  "#E4C1D9FF","#C75DABFF")
# Color origin
col_origin <- paletteer::paletteer_d("ggthemes::excel_Slice", n=4)
# Color name
col_aRMS <- paletteer::paletteer_c("ggthemes::Blue-Teal", n = 27)
col_eRMS <- paletteer::paletteer_c("ggthemes::Purple", n = 47)
col_name <- c(col_aRMS, col_eRMS)
# Color subtype
col_subtype <- c('#D3A2C2FF', '#95CECFFF')
col_fusion <- c('#D3A2C2FF', '#D3A2C2FF', '#95CECFFF', 'darkblue')
# Color Louvain clusters
col_cluster_names =  paletteer::paletteer_d("rcartocolor::Pastel", n = 12)
col_cluster_names_aggregate <- c("#276419FF","#7FBC41FF", '#FFAD72FF', '#FFE5CCFF', "#DE77AEFF", "#8E0152FF", '#D8D8E0FF')
## Order factors
PDX.integrated$origin <- factor(x = PDX.integrated$origin, levels = c("Wei et al.", "Patel et al.", "Danielli et al.", "Weng et al."))
PDX.integrated$model <- factor(x = PDX.integrated$model, levels = c("Patient", "O-PDX", "Primary culture", "Cell line"))
PDX.integrated$subtype <- factor(x = PDX.integrated$subtype, levels = c("eRMS", "aRMS"))
PDX.integrated$name <- factor(x = PDX.integrated$name, levels = c('20082',  'aRMS-1',  'aRMS-2', 'aRMS-3',
'aRMS-4',  'aRMS-5', 'KFR', 'Mast118',
'Mast95', 'MSK72117', 'MSK72117_SC',
'MSK82489', 'Rh4',  'Rh41',   'RMS',
'SJRHB010468_D1',  'SJRHB010468_X1', 'SJRHB013757_D2',
'SJRHB013757_X1', 'SJRHB013759_A1',  'SJRHB013759_A2',
'SJRHB013759_X14','SJRHB013759_X15', 'SJRHB031320_D1',
'SJRHB031320_X1', 'SJRHB046156_A1', 'SJRHB046156_X1',
'20696','21202', '29806',
'eRMS-1.1','eRMS-1.2',  'eRMS-2.1', 'eRMS-2.2',
'eRMS-3.2','eRMS-4',  'eRMS-8.1', 'eRMS-8.2',
'eRMS-8.3', 'Mast111','Mast139',  'Mast139_SC',
'Mast39',   'Mast85_r1','Mast85_r2',
'Mast85_r2_SC', 'MSK74711', 'RD', 'SJRHB000026_R2',  'SJRHB000026_R3',  'SJRHB000026_X1',
'SJRHB000026_X2', 'SJRHB010927_D1', 'SJRHB010927_X1',
'SJRHB010928_R1', 'SJRHB010928_X1',  'SJRHB011_D',
'SJRHB011_X', 'SJRHB012_R', 'SJRHB012_S', 'SJRHB012_Y',
'SJRHB012_Z', 'SJRHB012405_D1', 'SJRHB012405_X1',  'SJRHB013758_D1',
'SJRHB013758_D2', 'SJRHB013758_X1', 'SJRHB013758_X2',  'SJRHB030680_R1',
'SJRHB030680_X1', 'SJRHB049189_D1', 'SJRHB049189_X1'))
PDX.integrated$cluster_names <- factor(x = PDX.integrated$cluster_names,
levels = c('8-Progenitor','1-TR-progenitor', '3-Proliferative', '2-DNA replication',  '5-DNA replication',
'10-DNA replication', '4-Ground','0-Ground', '11-Ground','6-TR-differentiated',  '9-Differentiated', '7-Apoptosis'))
PDX.integrated$cluster_names_aggregate <- factor(x = PDX.integrated$cluster_names_aggregate,
levels = c('Progenitor','TR-progenitor', 'Proliferative', 'Ground', 'TR-differentiated', 'Differentiated', 'Apoptosis'))
PDX.integrated$seurat_clusters <- factor(x = PDX.integrated$seurat_clusters, levels = c('8', '1',  '3', '2', '5', '10', '4', '0', '11', '6', '9', '7'))
head(PDX.integrated)
variables <- c('cluster_names', 'seurat_clusters', 'cluster_names_aggregate',  'name', 'model', 'origin', 'sex', "sequencing", 'age', 'site', 'status', 'location','treatment')
names(variables) <- c('cluster_names', 'seurat_clusters', 'cluster_names_aggregate', 'name', 'model', 'origin', 'sex', "sequencing", 'age', 'site', 'status', 'location','treatment')
for (i in 1:length(variables)) {
table <- md[, .N, by = c(variables[[i]])]
write.csv(table, file.path(analysis_dir, paste0("0_Number_cells_by_", names(variables)[i], ".csv")))
}
DimPlot(PDX.integrated, reduction = "umap_rpca", group.by = 'seurat_clusters', label = 1, cols = col_cluster_names, pt.size = 2, raster=TRUE, raster.dpi = c(1012, 1012)) + NoAxes()
DimPlot(PDX.integrated, reduction = "umap_rpca", group.by = 'seurat_clusters', label = 1, cols = col_cluster_names, pt.size = 2,
raster=TRUE, raster.dpi = c(1012, 1012)) + NoAxes() + NoLegend()
# UMAP plot Louvain clusters
DimPlot(PDX.integrated, reduction = "umap_rpca", group.by = 'seurat_clusters', label = 1, cols = col_cluster_names, pt.size = 2,
raster=TRUE, raster.dpi = c(1012, 1012)) + NoAxes() + NoLegend()
ggsave(file.path(analysis_dir, paste0("7_UMAP_clusters.pdf")), width=5, height=5, dpi=300)
head(PDX.integrated)
# UMAP plot with cluster names
DimPlot(PDX.integrated, reduction = "umap_rpca",  label = FALSE, cols = col_cluster_names, pt.size = 2, raster=TRUE, raster.dpi = c(1012, 1012), shuffle=TRUE) + NoLegend() + NoAxes()
# UMAP plot with cluster names (aggregate)
DimPlot(PDX.integrated, reduction = "umap_rpca",  label = 0, cols = col_cluster_names_aggregate, pt.size = 2, raster=TRUE, raster.dpi = c(1012, 1012), shuffle=TRUE)  + NoAxes()
DimPlot(PDX.integrated, reduction = "umap_rpca",  group.by = `Cluster assignment`, label = 0, cols = col_cluster_names_aggregate, pt.size = 2, raster=TRUE, raster.dpi = c(1012, 1012), shuffle=TRUE)  + NoAxes()
DimPlot(PDX.integrated, reduction = "umap_rpca",  group.by = 'Cluster assignment', label = 0, cols = col_cluster_names_aggregate, pt.size = 2, raster=TRUE, raster.dpi = c(1012, 1012), shuffle=TRUE)  + NoAxes()
ggsave(file.path(analysis_dir, "7b_UMAP_clusters_aggregates.pdf"), width=5.5, height=4, dpi=300)
DimPlot(PDX.integrated, reduction = "umap_rpca",  group.by = 'Cluster assignment',  label = 0, cols = col_cluster_names_aggregate, pt.size = 2, raster=TRUE, raster.dpi = c(1012, 1012), shuffle=TRUE) + NoLegend() + NoAxes()
ggsave(file.path(analysis_dir, "7b_UMAP_clusters_aggregates_no_legend.pdf"), width=4, height=4, dpi=300)
DimPlot(PDX.integrated, reduction = "umap_rpca",  group.by = 'Cluster assignment',  label = 4,
cols = col_cluster_names_aggregate, pt.size = 2, raster=TRUE, raster.dpi = c(1012, 1012), shuffle=TRUE) + NoLegend() + NoAxes()
DimPlot(PDX.integrated, reduction = "umap_rpca",  group.by = 'Cluster assignment',  label = 0, cols = col_cluster_names_aggregate, pt.size = 2, raster=TRUE, raster.dpi = c(1012, 1012), shuffle=TRUE) + NoLegend() + NoAxes()
DimPlot(PDX.integrated, reduction = "umap_rpca",  group.by = 'Cluster assignment',  label = 3, cols = col_cluster_names_aggregate, pt.size = 2, raster=TRUE, raster.dpi = c(1012, 1012), shuffle=TRUE) + NoLegend() + NoAxes()
DimPlot(PDX.integrated, reduction = "umap_rpca",  group.by = 'Cluster assignment',  label = 0, cols = col_cluster_names_aggregate, pt.size = 2, raster=TRUE, raster.dpi = c(1012, 1012), shuffle=TRUE) + NoLegend() + NoAxes()
DimPlot(PDX.integrated, reduction = "umap_rpca",  group.by = 'Cluster assignment', label = 0, cols = col_cluster_names_aggregate, pt.size = 2, raster=TRUE, raster.dpi = c(1012, 1012), shuffle=TRUE)  + NoAxes()
DimPlot(PDX.integrated, reduction = "umap_rpca",  group.by = 'Cluster assignment', label=T, label = 0, cols = col_cluster_names_aggregate, pt.size = 2, raster=TRUE, raster.dpi = c(1012, 1012), shuffle=TRUE) + NoLegend() + NoAxes()
DimPlot(PDX.integrated, reduction = "umap_rpca",  group.by = 'Cluster assignment', label=T, label.size=4,
cols = col_cluster_names_aggregate, pt.size = 2, raster=TRUE, raster.dpi = c(1012, 1012), shuffle=TRUE) + NoLegend() + NoAxes()
DimPlot(PDX.integrated, reduction = "umap_rpca",  group.by = 'Cluster assignment', label=T,
cols = col_cluster_names_aggregate, pt.size = 2, raster=TRUE, raster.dpi = c(1012, 1012), shuffle=TRUE) + NoLegend() + NoAxes()
?DimPlot
DimPlot(PDX.integrated, reduction = "umap_rpca",  group.by = 'Cluster assignment', label.size=4,
cols = col_cluster_names_aggregate, pt.size = 2, raster=TRUE, raster.dpi = c(1012, 1012), shuffle=TRUE) + NoLegend() + NoAxes()
DimPlot(PDX.integrated, reduction = "umap_rpca",  group.by = 'Cluster assignment', label = TRUE, label.size=4,
cols = col_cluster_names_aggregate, pt.size = 2, raster=TRUE, raster.dpi = c(1012, 1012), shuffle=TRUE) + NoLegend() + NoAxes()
DimPlot(PDX.integrated, reduction = "umap_rpca",  group.by = 'Cluster assignment',
cols = col_cluster_names_aggregate, pt.size = 2, raster=TRUE, raster.dpi = c(1012, 1012), shuffle=TRUE) + NoLegend() + NoAxes()
ggsave(file.path(analysis_dir, "7b_UMAP_clusters_aggregates_no_legend.pdf"), width=4, height=4, dpi=300)
rm(list = ls())
library(dplyr)
library(Seurat)
library(ggplot2)
library(patchwork)
library(viridis)
library(future)
plan("multiprocess", workers = 256)
options(future.globals.maxSize = 256000 * 1024^2)
#PDX.combined <- readRDS("/mnt/Sara/write/Danielli_Patel_Langenau_20221220.rds")
PDX.combined <- readRDS("/Volumes/Sara_PhD/scRNAseq_data/write/Danielli_Patel_Langenau_20221220.rds")
PDX.combined
## Data normalization
PDX.combined <- NormalizeData(PDX.combined, normalization.method = "LogNormalize", scale.factor = 10000)
## Highly variable features
PDX.combined <- FindVariableFeatures(PDX.combined, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(PDX.combined), 10)
# Scaling data
PDX.combined <- ScaleData(PDX.combined, features = VariableFeatures(PDX.combined))
## Dimension reduction
PDX.combined
PDX.combined <- RunPCA(PDX.combined, reduction.name = "pca_no_regression", reduction.key = "pca_no_regression")
