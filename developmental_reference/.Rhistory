library(ComplexHeatmap)
library(qs)
library(cowplot)
library(SingleR)
library(Seurat)
# Set up environment ------------------------------------------------
base_dir <- file.path('/Volumes/Sara_PhD/scRNAseq_data')
analysis_dir <- file.path(base_dir, 'output/metadata/early_development_projection')
if (!dir.exists(analysis_dir)){dir.create(analysis_dir, recursive = T)}
plot_dir <- file.path(base_dir, "analysis/plot")
if (!dir.exists(plot_dir)){dir.create(plot_dir, recursive = T)}
data_dir <- "/Users/sdaniell/Dropbox (Partners HealthCare)/Sara Danielli/Project/Developmental datasets/data"
resource_dir <- file.path('/Users/sdaniell/Dropbox (Partners HealthCare)/Sara Danielli/Manuscripts/2023 - Meta-data/GITHUB/RMS-metadata/Resources')
source(file.path(resource_dir, 'single_cell_preprocessing_helper_functions_CBJr.R'))
source(file.path(resource_dir, 'NMF_helper_function.R'))
# Process tumor dataset by sample -----------------------------------
# Check if the file with tumor aggregated programs already exists
if (file.exists(file.path(analysis_dir, "agg_cm_mean_sample.qs"))) {
# If the file exists, print a message or perform any other action
print("The file already exists. Skipping this part of the code.")
} else {
# Read tumor file (processed and annotated)
data <- readRDS(file.path(base_dir, 'write/FPRMS_PAX3FOXO1_final_20240130.rds'))
}
# Read tumor file (processed and annotated)
data <- readRDS(file.path(base_dir, 'write/FPRMS_PAX3FOXO1_final_20240130.rds'))
# Pseudobulk by sample
pseudobulk_mean <- AggregateExpression(data, return.seurat = F, slot = "data", assays = "RNA", group.by = "Cluster assignment")$RNA %>%
as.data.frame()
data
# Pseudobulk by sample
pseudobulk_mean <- AggregateExpression(data, return.seurat = F, slot = "counts", assays = "RNA", group.by = "Cluster assignment")$RNA %>%
as.data.frame()
colnames(pseudobulk_mean) <- sort(unique(data$`Cluster assignment`))
colnames(pseudobulk_mean)
qsave(pseudobulk_mean, file.path(analysis_dir, "agg_cm_mean_sample.qs"))
# Identify markers
Idents(data) <- data$`Cluster assignment`
markers <- FindAllMarkers(data, only.pos = T, densify = T) %>%
filter(p_val_adj < 0.05) %>%
group_by(cluster) %>%
arrange(-avg_log2FC, .by_group = T)
markers <- FindAllMarkers(data, only.pos = T, densify = T) %>%
#filter(p_val_adj < 0.05) %>%
group_by(cluster) %>%
arrange(-avg_log2FC, .by_group = T)
# Read tumor file (processed and annotated)
data <- readRDS(file.path(base_dir, 'write/FPRMS_PAX7FOXO1_final_20240130.rds'))
# Load packages -----------------------------------
rm(list = ls())
library(data.table)
library(tidyverse)
library(crayon)
library(ape)
library(readxl)
library(ComplexHeatmap)
library(qs)
library(cowplot)
library(SingleR)
library(Seurat)
# Set up environment ------------------------------------------------
base_dir <- file.path('/Volumes/Sara_PhD/scRNAseq_data')
analysis_dir <- file.path(base_dir, 'output/metadata/early_development_projection')
if (!dir.exists(analysis_dir)){dir.create(analysis_dir, recursive = T)}
plot_dir <- file.path(base_dir, "analysis/plot")
if (!dir.exists(plot_dir)){dir.create(plot_dir, recursive = T)}
data_dir <- "/Users/sdaniell/Dropbox (Partners HealthCare)/Sara Danielli/Project/Developmental datasets/data"
resource_dir <- file.path('/Users/sdaniell/Dropbox (Partners HealthCare)/Sara Danielli/Manuscripts/2023 - Meta-data/GITHUB/RMS-metadata/Resources')
source(file.path(resource_dir, 'single_cell_preprocessing_helper_functions_CBJr.R'))
source(file.path(resource_dir, 'NMF_helper_function.R'))
# Read tumor file (processed and annotated)
data <- readRDS(file.path(base_dir, 'write/FPRMS_PAX7FOXO1_final_20240130.rds'))
head(data@meta.data)
# Pseudobulk by sample
pseudobulk_mean <- AggregateExpression(data, return.seurat = F, slot = "counts", assays = "RNA", group.by = "Cluster assignment")$RNA %>%
as.data.frame()
colnames(pseudobulk_mean) <- sort(unique(data$`Cluster assignment`))
qsave(pseudobulk_mean, file.path(analysis_dir, "agg_cm_mean_sample.qs"))
# Identify markers
Idents(data) <- data$`Cluster assignment`
markers <- FindAllMarkers(data, only.pos = T, densify = T) %>%
filter(p_val_adj < 0.05) %>%
group_by(cluster) %>%
arrange(-avg_log2FC, .by_group = T)
markers
View(markers)
qsave(markers, file.path(analysis_dir, "markers_sample.qs"))
# HVGs
qsave(VariableFeatures(data), file.path(analysis_dir, "hvgs.qs"))
## Loading reference data
ref_cm <- qread(file.path(data_dir, "Zeng_2023/pseudobulk_CellType.qs"))
# select RNA
ref_cm <- ref_cm$RNA
# change names with "_", otherwise I get an error
colnames(ref_cm) <- str_replace_all(colnames(ref_cm), "_", " ")
# remove some elements and reorder
desired_order <- sort(colnames(ref_cm))
ref_cm <- ref_cm[, desired_order]
ref_degs <- qread(file.path(data_dir, "Zeng_2023/markers_CellType.qs"))
ref_degs <- ref_degs %>% group_by(cluster) %>% top_n(100, wt = avg_log2FC)
ref_degs <- lapply(split(ref_degs, f = ref_degs$cluster), function(x) x$gene)
# change names with "_", otherwise I get an error
names(ref_degs) <- str_replace_all(names(ref_degs), "_", " ")
# remove some elements and reorder
ref_degs <- ref_degs[desired_order]
ref_hvgs <- qread(file.path(data_dir, "Zeng_2023/hvgs.qs"))
## Loading query data by sample
query_cm <- qread(file.path(analysis_dir, "agg_cm_mean_sample.qs")) %>% as.data.frame()
query_degs <- qread(file.path(analysis_dir, 'markers_sample.qs'))
query_degs <- split(query_degs, query_degs$cluster)
query_degs <- lapply(query_degs, function(x) unique(x$gene))
query_hvgs <- qread(file.path(analysis_dir, "hvgs.qs"))
query_metagene_order <-  colnames(query_cm)
query_metagene_order
query_degs
## project data
projectDataNoScaling(query_cm, query_degs, query_hvgs, query_metagene_order,
ref_cm, ref_degs, ref_hvgs,
outFile = file.path(plot_dir, 'Zeng_2023_cell_type.pdf'),
desired_order, fig_width = 30, fig_height = 5)
plot_dir <- file.path(analysis_dir, "plot")
if (!dir.exists(plot_dir)){dir.create(plot_dir, recursive = T)}
## project data
projectDataNoScaling(query_cm, query_degs, query_hvgs, query_metagene_order,
ref_cm, ref_degs, ref_hvgs,
outFile = file.path(plot_dir, 'Zeng_2023_cell_type.pdf'),
desired_order, fig_width = 30, fig_height = 5)
head(data@meta.data)
# Pseudobulk by sample
pseudobulk_mean <- AggregateExpression(data, return.seurat = F, slot = "counts", assays = "RNA", group.by = "name")$RNA %>%
as.data.frame()
colnames(pseudobulk_mean) <- sort(unique(data$name))
qsave(pseudobulk_mean, file.path(analysis_dir, "agg_cm_mean_sample.qs"))
# Identify markers
Idents(data) <- data$name
markers <- FindAllMarkers(data, only.pos = T, densify = T) %>%
filter(p_val_adj < 0.05) %>%
group_by(cluster) %>%
arrange(-avg_log2FC, .by_group = T)
qsave(markers, file.path(analysis_dir, "markers_sample.qs"))
# HVGs
qsave(VariableFeatures(data), file.path(analysis_dir, "hvgs.qs"))
## Loading reference data
ref_cm <- qread(file.path(data_dir, "Zeng_2023/pseudobulk_CellType.qs"))
# select RNA
ref_cm <- ref_cm$RNA
# change names with "_", otherwise I get an error
colnames(ref_cm) <- str_replace_all(colnames(ref_cm), "_", " ")
# remove some elements and reorder
desired_order <- sort(colnames(ref_cm))
ref_cm <- ref_cm[, desired_order]
ref_degs <- qread(file.path(data_dir, "Zeng_2023/markers_CellType.qs"))
ref_degs <- ref_degs %>% group_by(cluster) %>% top_n(100, wt = avg_log2FC)
ref_degs <- lapply(split(ref_degs, f = ref_degs$cluster), function(x) x$gene)
# change names with "_", otherwise I get an error
names(ref_degs) <- str_replace_all(names(ref_degs), "_", " ")
# remove some elements and reorder
ref_degs <- ref_degs[desired_order]
ref_hvgs <- qread(file.path(data_dir, "Zeng_2023/hvgs.qs"))
## Loading query data by sample
query_cm <- qread(file.path(analysis_dir, "agg_cm_mean_sample.qs")) %>% as.data.frame()
query_degs <- qread(file.path(analysis_dir, 'markers_sample.qs'))
query_degs <- split(query_degs, query_degs$cluster)
query_degs <- lapply(query_degs, function(x) unique(x$gene))
query_hvgs <- qread(file.path(analysis_dir, "hvgs.qs"))
query_metagene_order <-  colnames(query_cm)
## project data
projectDataNoScaling(query_cm, query_degs, query_hvgs, query_metagene_order,
ref_cm, ref_degs, ref_hvgs,
outFile = file.path(plot_dir, 'Zeng_2023_cell_type_sample.pdf'),
desired_order, fig_width = 30, fig_height = 20)
## project data
projectDataNoScaling(query_cm, query_degs, query_hvgs, query_metagene_order,
ref_cm, ref_degs, ref_hvgs,
outFile = file.path(plot_dir, 'Zeng_2023_cell_type_sample.pdf'),
desired_order, fig_width = 30, fig_height = 10)
Load packages -----------------------------------
# Load packages -----------------------------------
rm(list = ls())
library(data.table)
library(tidyverse)
library(crayon)
library(ape)
library(readxl)
library(ComplexHeatmap)
library(qs)
library(cowplot)
library(SingleR)
library(Seurat)
# Set up environment ------------------------------------------------
base_dir <- file.path('/Volumes/Sara_PhD/scRNAseq_data')
analysis_dir <- file.path(base_dir, 'output/metadata/early_development_projection')
if (!dir.exists(analysis_dir)){dir.create(analysis_dir, recursive = T)}
plot_dir <- file.path(analysis_dir, "plot")
if (!dir.exists(plot_dir)){dir.create(plot_dir, recursive = T)}
data_dir <- "/Users/sdaniell/Dropbox (Partners HealthCare)/Sara Danielli/Project/Developmental datasets/data"
resource_dir <- file.path('/Users/sdaniell/Dropbox (Partners HealthCare)/Sara Danielli/Manuscripts/2023 - Meta-data/GITHUB/RMS-metadata/Resources')
source(file.path(resource_dir, 'single_cell_preprocessing_helper_functions_CBJr.R'))
source(file.path(resource_dir, 'NMF_helper_function.R'))
# Read tumor file (processed and annotated)
data <- readRDS(file.path(base_dir, 'write/FPRMS_PAX7FOXO1_final_20240130.rds'))
# Pseudobulk by sample
pseudobulk_mean <- AggregateExpression(data, return.seurat = F, slot = "counts", assays = "RNA", group.by = "subtype")$RNA %>%
as.data.frame()
colnames(pseudobulk_mean) <- sort(unique(data$subtype))
qsave(pseudobulk_mean, file.path(analysis_dir, "agg_cm_mean_subtype.qs"))
# Identify markers
Idents(data) <- data$subtype
markers <- FindAllMarkers(data, only.pos = T, densify = T) %>%
filter(p_val_adj < 0.05) %>%
group_by(cluster) %>%
arrange(-avg_log2FC, .by_group = T)
# Read tumor file (processed and annotated)
data <- readRDS(file.path(base_dir, 'write/RMS_atlas_final_20240130.rds'))
Idents(data) <- 'subtype'
data_sub <- sample(data, size = 5000, replace = F)
head(data@meta.data)
Idents(data) <- 'fusion'
data_sub <- sample(data, size = 5000, replace = F)
data
Idents(data)
# select 5000 random cells/subtype (otherwise memory error)
# Compute the length of cells from obj2
cells.to.sample <- 1500
set.seed(111)
# select 5000 random cells/subtype (otherwise memory error)
# Compute the length of cells from obj2
cells.to.sample <- 2000
set.seed(111)
data_sub <- sample(x = colnames(data), size = cells.to.sample, replace = F)
# select 5000 random cells/subtype (otherwise memory error)
# Compute the length of cells from obj2
cells.to.sample <- 10000
set.seed(111)
data_sub <- sample(x = colnames(data), size = cells.to.sample, replace = F)
cells_samples <- sample(x = colnames(data), size = cells.to.sample, replace = F)
data_sub <- subset(data, cells = c(cells_samples))
head(data_sub)
# Pseudobulk by sample
pseudobulk_mean <- AggregateExpression(data_sub, return.seurat = F, slot = "counts", assays = "RNA", group.by = "fusion")$RNA %>%
as.data.frame()
colnames(pseudobulk_mean) <- sort(unique(data$fusion))
qsave(pseudobulk_mean, file.path(analysis_dir, "agg_cm_mean_fusion.qs"))
# Identify markers
Idents(data) <- data$fusion
markers <- FindAllMarkers(data, only.pos = T, densify = T) %>%
filter(p_val_adj < 0.05) %>%
group_by(cluster) %>%
arrange(-avg_log2FC, .by_group = T)
# HVGs
qsave(VariableFeatures(data), file.path(analysis_dir, "hvgs_fusion.qs"))
# remove MYOD1
data2 <- subset(data, fusion == -c('MYOD1'))
?subset
# remove MYOD1
data2 <- subset(data, fusion == 'MYOD1', invert = TRUE)
# Load packages -----------------------------------
rm(list = ls())
library(data.table)
library(tidyverse)
library(crayon)
library(ape)
library(readxl)
library(ComplexHeatmap)
library(qs)
library(cowplot)
library(SingleR)
library(Seurat)
# Set up environment ------------------------------------------------
base_dir <- file.path('/Volumes/Sara_PhD/scRNAseq_data')
analysis_dir <- file.path(base_dir, 'output/metadata/early_development_projection')
if (!dir.exists(analysis_dir)){dir.create(analysis_dir, recursive = T)}
plot_dir <- file.path(analysis_dir, "plot")
if (!dir.exists(plot_dir)){dir.create(plot_dir, recursive = T)}
data_dir <- "/Users/sdaniell/Dropbox (Partners HealthCare)/Sara Danielli/Project/Developmental datasets/data"
resource_dir <- file.path('/Users/sdaniell/Dropbox (Partners HealthCare)/Sara Danielli/Manuscripts/2023 - Meta-data/GITHUB/RMS-metadata/Resources')
source(file.path(resource_dir, 'single_cell_preprocessing_helper_functions_CBJr.R'))
source(file.path(resource_dir, 'NMF_helper_function.R'))
# Process tumor dataset by metaprogram -----------------------------------
# Read tumor file (processed and annotated)
data <- readRDS(file.path(base_dir, 'write/RMS_atlas_final_20240130.rds'))
# remove MYOD1
data <- subset(data, fusion == 'MYOD1', invert = TRUE)
# remove MYOD1
data <- subset(data, fusion == 'MYOD1', invert = TRUE)
data
# select 10000 random cells(otherwise memory error)
cells.to.sample <- 30000
set.seed(111)
cells_samples <- sample(x = colnames(data), size = cells.to.sample, replace = F)
data_sub <- subset(data, cells = c(cells_samples))
data <- subset(data, cells = c(cells_samples))
data <- DietSeurat(data)
# select 10000 random cells(otherwise memory error)
cells.to.sample <- 30000
set.seed(111)
cells_samples <- sample(x = colnames(data), size = cells.to.sample, replace = F)
data <- subset(data, cells = c(cells_samples))
# select 10000 random cells(otherwise memory error)
cells.to.sample <- 10000
set.seed(111)
cells_samples <- sample(x = colnames(data), size = cells.to.sample, replace = F)
data <- subset(data, cells = c(cells_samples))
# remove MYOD1
data <- subset(data, fusion == 'MYOD1', invert = TRUE)
# Pseudobulk by sample
pseudobulk_mean <- AggregateExpression(data_sub, return.seurat = F, slot = "counts", assays = "RNA", group.by = "fusion")$RNA %>%
as.data.frame()
# Pseudobulk by sample
pseudobulk_mean <- AggregateExpression(data, return.seurat = F, slot = "counts", assays = "RNA", group.by = "fusion")$RNA %>%
as.data.frame()
colnames(pseudobulk_mean) <- sort(unique(data$fusion))
qsave(pseudobulk_mean, file.path(analysis_dir, "agg_cm_mean_fusion.qs"))
# Identify markers
Idents(data) <- data$fusion
markers <- FindAllMarkers(data, only.pos = T, densify = T) %>%
filter(p_val_adj < 0.05) %>%
group_by(cluster) %>%
arrange(-avg_log2FC, .by_group = T)
qsave(markers, file.path(analysis_dir, "markers_fusion.qs"))
# HVGs
qsave(VariableFeatures(data), file.path(analysis_dir, "hvgs_fusion.qs"))
## Loading reference data
ref_cm <- qread(file.path(data_dir, "Zeng_2023/pseudobulk_CellType.qs"))
# select RNA
ref_cm <- ref_cm$RNA
# change names with "_", otherwise I get an error
colnames(ref_cm) <- str_replace_all(colnames(ref_cm), "_", " ")
# remove some elements and reorder
desired_order <- sort(colnames(ref_cm))
ref_cm <- ref_cm[, desired_order]
ref_degs <- qread(file.path(data_dir, "Zeng_2023/markers_CellType.qs"))
ref_degs <- ref_degs %>% group_by(cluster) %>% top_n(100, wt = avg_log2FC)
ref_degs <- lapply(split(ref_degs, f = ref_degs$cluster), function(x) x$gene)
# change names with "_", otherwise I get an error
names(ref_degs) <- str_replace_all(names(ref_degs), "_", " ")
# remove some elements and reorder
ref_degs <- ref_degs[desired_order]
ref_hvgs <- qread(file.path(data_dir, "Zeng_2023/hvgs.qs"))
## Loading query data by sample
query_cm <- qread(file.path(analysis_dir, "agg_cm_mean_fusion.qs")) %>% as.data.frame()
query_degs <- qread(file.path(analysis_dir, 'markers_fusion.qs'))
query_degs <- split(query_degs, query_degs$cluster)
query_degs <- lapply(query_degs, function(x) unique(x$gene))
query_hvgs <- qread(file.path(analysis_dir, "hvgs_fusion.qs"))
query_metagene_order <-  colnames(query_cm)
## project data
projectDataNoScaling(query_cm, query_degs, query_hvgs, query_metagene_order,
ref_cm, ref_degs, ref_hvgs,
outFile = file.path(plot_dir, 'Zeng_2023_cell_type_fusion.pdf'),
desired_order, fig_width = 30, fig_height = 4)
# Read tumor file (processed and annotated)
data <- readRDS(file.path(base_dir, 'write/FPRMS_PAX7FOXO1_final_20240130.rds'))
# Read tumor file (processed and annotated)
data <- readRDS(file.path(base_dir, 'write/RMS_atlas_final_20240130.rds'))
data <- DietSeurat(data)
head(data@meta.data)
# subset to patients only
data <- subset(data, model == 'Patient')
data
# remove MYOD1
data <- subset(data, fusion == 'MYOD1', invert = TRUE)
data
# Pseudobulk by sample
pseudobulk_mean <- AggregateExpression(data, return.seurat = F, slot = "counts", assays = "RNA", group.by = "fusion")$RNA %>%
as.data.frame()
colnames(pseudobulk_mean) <- sort(unique(data$fusion))
qsave(pseudobulk_mean, file.path(analysis_dir, "agg_cm_mean_fusion.qs"))
# Identify markers
Idents(data) <- data$fusion
markers <- FindAllMarkers(data, only.pos = T, densify = T) %>%
filter(p_val_adj < 0.05) %>%
group_by(cluster) %>%
arrange(-avg_log2FC, .by_group = T)
## Loading reference data
ref_cm <- qread(file.path(data_dir, "Zeng_2023/pseudobulk_CellType.qs"))
# select RNA
ref_cm <- ref_cm$RNA
# change names with "_", otherwise I get an error
colnames(ref_cm) <- str_replace_all(colnames(ref_cm), "_", " ")
# remove some elements and reorder
desired_order <- sort(colnames(ref_cm))
ref_cm <- ref_cm[, desired_order]
ref_degs <- qread(file.path(data_dir, "Zeng_2023/markers_CellType.qs"))
ref_degs <- ref_degs %>% group_by(cluster) %>% top_n(100, wt = avg_log2FC)
ref_degs <- lapply(split(ref_degs, f = ref_degs$cluster), function(x) x$gene)
# change names with "_", otherwise I get an error
names(ref_degs) <- str_replace_all(names(ref_degs), "_", " ")
# remove some elements and reorder
ref_degs <- ref_degs[desired_order]
ref_hvgs <- qread(file.path(data_dir, "Zeng_2023/hvgs.qs"))
## Loading query data by sample
query_cm <- qread(file.path(analysis_dir, "agg_cm_mean_fusion.qs")) %>% as.data.frame()
query_degs <- qread(file.path(analysis_dir, 'markers_fusion.qs'))
query_degs <- split(query_degs, query_degs$cluster)
query_degs <- lapply(query_degs, function(x) unique(x$gene))
query_hvgs <- qread(file.path(analysis_dir, "hvgs_fusion.qs"))
query_metagene_order <-  colnames(query_cm)
## project data
projectDataNoScaling(query_cm, query_degs, query_hvgs, query_metagene_order,
ref_cm, ref_degs, ref_hvgs,
outFile = file.path(plot_dir, 'Zeng_2023_cell_type_fusion.pdf'),
desired_order, fig_width = 30, fig_height = 4)
# Read tumor file (processed and annotated)
data <- readRDS(file.path(base_dir, 'write/RMS_atlas_final_20240130.rds'))
data <- DietSeurat(data)
# subset to patients only
data <- subset(data, model == 'Patient')
# select 10000 random cells(otherwise memory error)
# cells.to.sample <- 10000
# set.seed(111)
# cells_samples <- sample(x = colnames(data), size = cells.to.sample, replace = F)
# data <- subset(data, cells = c(cells_samples))
#
# remove MYOD1
data <- subset(data, fusion == 'MYOD1', invert = TRUE)
## Loading query data by sample
query_cm <- qread(file.path(analysis_dir, "agg_cm_mean_sample.qs")) %>% as.data.frame()
query_degs <- qread(file.path(analysis_dir, 'markers_sample.qs'))
query_degs <- split(query_degs, query_degs$cluster)
query_degs <- lapply(query_degs, function(x) unique(x$gene))
query_hvgs <- qread(file.path(analysis_dir, "hvgs.qs"))
## project data
projectDataNoScaling(query_cm, query_degs, query_hvgs, query_metagene_order,
ref_cm, ref_degs, ref_hvgs,
outFile = file.path(plot_dir, 'Zeng_2023_cell_type_sample.pdf'),
desired_order, fig_width = 30, fig_height = 40)
colnames(query_cm)
# Read tumor file (processed and annotated)
data <- readRDS(file.path(base_dir, 'write/RMS_atlas_final_20240130.rds'))
data <- DietSeurat(data)
# subset to patients only
data <- subset(data, model == 'Patient')
# select 10000 random cells(otherwise memory error)
# cells.to.sample <- 10000
# set.seed(111)
# cells_samples <- sample(x = colnames(data), size = cells.to.sample, replace = F)
# data <- subset(data, cells = c(cells_samples))
#
# remove MYOD1
data <- subset(data, fusion == 'MYOD1', invert = TRUE)
# Pseudobulk by sample
pseudobulk_mean <- AggregateExpression(data, return.seurat = F, slot = "counts", assays = "RNA", group.by = "name")$RNA %>%
as.data.frame()
colnames(pseudobulk_mean) <- sort(unique(data$name))
qsave(pseudobulk_mean, file.path(analysis_dir, "agg_cm_mean_sample.qs"))
# Identify markers
Idents(data) <- data$name
markers <- FindAllMarkers(data, only.pos = T, densify = T) %>%
filter(p_val_adj < 0.05) %>%
group_by(cluster) %>%
arrange(-avg_log2FC, .by_group = T)
qsave(markers, file.path(analysis_dir, "markers_sample.qs"))
# HVGs
qsave(VariableFeatures(data), file.path(analysis_dir, "hvgs.qs"))
## Loading reference data
ref_cm <- qread(file.path(data_dir, "Zeng_2023/pseudobulk_CellType.qs"))
# select RNA
ref_cm <- ref_cm$RNA
# change names with "_", otherwise I get an error
colnames(ref_cm) <- str_replace_all(colnames(ref_cm), "_", " ")
# remove some elements and reorder
desired_order <- sort(colnames(ref_cm))
ref_cm <- ref_cm[, desired_order]
ref_degs <- qread(file.path(data_dir, "Zeng_2023/markers_CellType.qs"))
ref_degs <- ref_degs %>% group_by(cluster) %>% top_n(100, wt = avg_log2FC)
ref_degs <- lapply(split(ref_degs, f = ref_degs$cluster), function(x) x$gene)
# change names with "_", otherwise I get an error
names(ref_degs) <- str_replace_all(names(ref_degs), "_", " ")
# remove some elements and reorder
ref_degs <- ref_degs[desired_order]
ref_hvgs <- qread(file.path(data_dir, "Zeng_2023/hvgs.qs"))
## Loading query data by sample
query_cm <- qread(file.path(analysis_dir, "agg_cm_mean_sample.qs")) %>% as.data.frame()
query_degs <- qread(file.path(analysis_dir, 'markers_sample.qs'))
query_degs <- split(query_degs, query_degs$cluster)
query_degs <- lapply(query_degs, function(x) unique(x$gene))
query_hvgs <- qread(file.path(analysis_dir, "hvgs.qs"))
query_metagene_order <-  colnames(query_cm)
## project data
projectDataNoScaling(query_cm, query_degs, query_hvgs, query_metagene_order,
ref_cm, ref_degs, ref_hvgs,
outFile = file.path(plot_dir, 'Zeng_2023_cell_type_sample.pdf'),
desired_order, fig_width = 30, fig_height = 40)
data@meta.data %>% group_by(subtype)
data@meta.data %>% group_by(subtype) %>% summarise(PatientID)
data@meta.data %>% group_by(subtype) %>% summarise()
data@meta.data %>% group_by(name, subtype) %>% summarise()
data@meta.data %>% group_by(subtype, name) %>% summarise()
data@meta.data %>% group_by(subtype, name) %>% summarise()
query_metagene_order$name
query_metagene_order
#query_metagene_order <-  colnames(query_cm)
query_metagene_order <-   data@meta.data %>% group_by(subtype, name) %>% summarise()
query_metagene_order
query_metagene_order$name
query_metagene_order <-   query_metagene_order$name
## project data
projectDataNoScaling(query_cm, query_degs, query_hvgs, query_metagene_order,
ref_cm, ref_degs, ref_hvgs,
outFile = file.path(plot_dir, 'Zeng_2023_cell_type_sample.pdf'),
desired_order, fig_width = 30, fig_height = 15)
data@meta.data %>% group_by(subtype, name) %>% summarise()
#query_metagene_order <-  colnames(query_cm)
query_metagene_order <-   data@meta.data %>% group_by(fusion, name) %>% summarise()
query_metagene_order <-   query_metagene_order$name
query_metagene_order
## project data
projectDataNoScaling(query_cm, query_degs, query_hvgs, query_metagene_order,
ref_cm, ref_degs, ref_hvgs,
outFile = file.path(plot_dir, 'Zeng_2023_cell_type_sample.pdf'),
desired_order, fig_width = 30, fig_height = 15)
