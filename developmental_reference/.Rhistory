## project data
projectDataNoScaling(query_cm, query_degs, query_hvgs, query_metagene_order,
ref_cm, ref_degs, ref_hvgs,
outFile = file.path(plot_dir, 'Zeng_2023_cell_type_fusion.pdf'),
desired_order, fig_width = 30, fig_height = 4)
# Read tumor file (processed and annotated)
data <- readRDS(file.path(base_dir, 'write/RMS_atlas_final_20240130.rds'))
data <- DietSeurat(data)
# subset to patients only
data <- subset(data, model == 'Patient')
# select 10000 random cells(otherwise memory error)
# cells.to.sample <- 10000
# set.seed(111)
# cells_samples <- sample(x = colnames(data), size = cells.to.sample, replace = F)
# data <- subset(data, cells = c(cells_samples))
#
# remove MYOD1
data <- subset(data, fusion == 'MYOD1', invert = TRUE)
## Loading query data by sample
query_cm <- qread(file.path(analysis_dir, "agg_cm_mean_sample.qs")) %>% as.data.frame()
query_degs <- qread(file.path(analysis_dir, 'markers_sample.qs'))
query_degs <- split(query_degs, query_degs$cluster)
query_degs <- lapply(query_degs, function(x) unique(x$gene))
query_hvgs <- qread(file.path(analysis_dir, "hvgs.qs"))
## project data
projectDataNoScaling(query_cm, query_degs, query_hvgs, query_metagene_order,
ref_cm, ref_degs, ref_hvgs,
outFile = file.path(plot_dir, 'Zeng_2023_cell_type_sample.pdf'),
desired_order, fig_width = 30, fig_height = 40)
colnames(query_cm)
# Read tumor file (processed and annotated)
data <- readRDS(file.path(base_dir, 'write/RMS_atlas_final_20240130.rds'))
data <- DietSeurat(data)
# subset to patients only
data <- subset(data, model == 'Patient')
# select 10000 random cells(otherwise memory error)
# cells.to.sample <- 10000
# set.seed(111)
# cells_samples <- sample(x = colnames(data), size = cells.to.sample, replace = F)
# data <- subset(data, cells = c(cells_samples))
#
# remove MYOD1
data <- subset(data, fusion == 'MYOD1', invert = TRUE)
# Pseudobulk by sample
pseudobulk_mean <- AggregateExpression(data, return.seurat = F, slot = "counts", assays = "RNA", group.by = "name")$RNA %>%
as.data.frame()
colnames(pseudobulk_mean) <- sort(unique(data$name))
qsave(pseudobulk_mean, file.path(analysis_dir, "agg_cm_mean_sample.qs"))
# Identify markers
Idents(data) <- data$name
markers <- FindAllMarkers(data, only.pos = T, densify = T) %>%
filter(p_val_adj < 0.05) %>%
group_by(cluster) %>%
arrange(-avg_log2FC, .by_group = T)
qsave(markers, file.path(analysis_dir, "markers_sample.qs"))
# HVGs
qsave(VariableFeatures(data), file.path(analysis_dir, "hvgs.qs"))
## Loading reference data
ref_cm <- qread(file.path(data_dir, "Zeng_2023/pseudobulk_CellType.qs"))
# select RNA
ref_cm <- ref_cm$RNA
# change names with "_", otherwise I get an error
colnames(ref_cm) <- str_replace_all(colnames(ref_cm), "_", " ")
# remove some elements and reorder
desired_order <- sort(colnames(ref_cm))
ref_cm <- ref_cm[, desired_order]
ref_degs <- qread(file.path(data_dir, "Zeng_2023/markers_CellType.qs"))
ref_degs <- ref_degs %>% group_by(cluster) %>% top_n(100, wt = avg_log2FC)
ref_degs <- lapply(split(ref_degs, f = ref_degs$cluster), function(x) x$gene)
# change names with "_", otherwise I get an error
names(ref_degs) <- str_replace_all(names(ref_degs), "_", " ")
# remove some elements and reorder
ref_degs <- ref_degs[desired_order]
ref_hvgs <- qread(file.path(data_dir, "Zeng_2023/hvgs.qs"))
## Loading query data by sample
query_cm <- qread(file.path(analysis_dir, "agg_cm_mean_sample.qs")) %>% as.data.frame()
query_degs <- qread(file.path(analysis_dir, 'markers_sample.qs'))
query_degs <- split(query_degs, query_degs$cluster)
query_degs <- lapply(query_degs, function(x) unique(x$gene))
query_hvgs <- qread(file.path(analysis_dir, "hvgs.qs"))
query_metagene_order <-  colnames(query_cm)
## project data
projectDataNoScaling(query_cm, query_degs, query_hvgs, query_metagene_order,
ref_cm, ref_degs, ref_hvgs,
outFile = file.path(plot_dir, 'Zeng_2023_cell_type_sample.pdf'),
desired_order, fig_width = 30, fig_height = 40)
data@meta.data %>% group_by(subtype)
data@meta.data %>% group_by(subtype) %>% summarise(PatientID)
data@meta.data %>% group_by(subtype) %>% summarise()
data@meta.data %>% group_by(name, subtype) %>% summarise()
data@meta.data %>% group_by(subtype, name) %>% summarise()
data@meta.data %>% group_by(subtype, name) %>% summarise()
query_metagene_order$name
query_metagene_order
#query_metagene_order <-  colnames(query_cm)
query_metagene_order <-   data@meta.data %>% group_by(subtype, name) %>% summarise()
query_metagene_order
query_metagene_order$name
query_metagene_order <-   query_metagene_order$name
## project data
projectDataNoScaling(query_cm, query_degs, query_hvgs, query_metagene_order,
ref_cm, ref_degs, ref_hvgs,
outFile = file.path(plot_dir, 'Zeng_2023_cell_type_sample.pdf'),
desired_order, fig_width = 30, fig_height = 15)
data@meta.data %>% group_by(subtype, name) %>% summarise()
#query_metagene_order <-  colnames(query_cm)
query_metagene_order <-   data@meta.data %>% group_by(fusion, name) %>% summarise()
query_metagene_order <-   query_metagene_order$name
query_metagene_order
## project data
projectDataNoScaling(query_cm, query_degs, query_hvgs, query_metagene_order,
ref_cm, ref_degs, ref_hvgs,
outFile = file.path(plot_dir, 'Zeng_2023_cell_type_sample.pdf'),
desired_order, fig_width = 30, fig_height = 15)
rm(list = ls())
library(dplyr)
library(Seurat)
library(ggplot2)
library(patchwork)
library(readxl)
library(writexl)
library(data.table)
library(viridis)
library(future)
library(paletteer)
library(stringr)
options(Seurat.object.assay.version = "v5")
# Set up environment ------------------------------------------------
base_dir <- file.path('/Volumes/Sara_PhD/scRNAseq_data')
Xi_dir <- file.path(base_dir, 'RMS/Xi_Cell_stem_cell_2020')
genelist_dir <- file.path(base_dir, 'list_final')
source(file.path('/Users/sdaniell/Dropbox (Partners HealthCare)/Sara Danielli/Manuscripts/2023 - Meta-data/GITHUB/RMS-metadata/Resources/Plot_style_v2.R'))
# color palette
#colors populations
col_celltype <- c('#62205FFF', '#D0A8C8FF', '#DCEAEAFF', '#7CC3C9FF', '#172869FF', '#FBF5A3FF')
names(col_celltype) <- c('Skeletal mesenchymal', 'Myogenic progenitors', 'Myoblasts-myocyte', 'Myoblasts', 'Myocytes', 'Postnatal satellite cells')
#colors time points
col_timepoints <- c('#9E0142FF', '#D53E4FFF', '#F46D43FF', '#F46D43FF', '#FDAE61FF',  '#FEE08BFF',
'#FFFFBFFF',   '#E6F598FF', '#ABDDA4FF', '#66C2A5FF', '#3288BDFF',
c(rep('#5E4FA2FF', 4)), 'grey')
names(col_timepoints) <- c("Wk5.0", "Wk6.0" ,  "Wk6.5", "Wk7.0", "Wk7.25",  "Wk7.75" , "Wk9" ,   "Wk12",   "Wk14", "Wk17" ,  "Wk18",
"Yr7",    "Yr11",   "Yr34" ,  "Yr42", NA)
col_timepoints_aggregate <- c('#9E0142FF',    '#FDAE61FF',   '#FFFFBFFF',   '#ABDDA4FF', '#66C2A5FF', '#3288BDFF', '#5E4FA2FF')
names(col_timepoints_aggregate) <- c('Wk5-6', 'Wk6-7', 'Wk7-8' ,'Wk9' ,'Wk12-14', 'Wk17-18', 'Postnatal')
merged_Xietal <- readRDS("/Volumes/Sara_PhD/scRNAseq_data/write/Dev_muscle_Xietal.rds")
## Plots ------------------------------------------------------------
DimPlot(merged_Xietal, reduction = "UMAP_no_regression", group.by = 'timepoint', cols = col_timepoints) + NoAxes()
ggsave("/Volumes/Sara_PhD/scRNAseq_data/output/metadata/dev_muscle/3_UMAP_celltype_col1.pdf",
width=5, height=4, dpi=300)
DimPlot(merged_Xietal, reduction = "UMAP_no_regression", group.by = 'timepoint_aggregate', cols = col_timepoints_aggregate) + NoAxes()
ggsave("/Volumes/Sara_PhD/scRNAseq_data/output/metadata/dev_muscle/3_UMAP_celltype_aggregate_col1.pdf",
width=5, height=4, dpi=300)
DimPlot(merged_Xietal, reduction = "UMAP_no_regression", group.by = 'celltype', cols=col_celltype) + NoAxes()
ggsave("/Volumes/Sara_PhD/scRNAseq_data/output/metadata/dev_muscle/3_UMAP_celltype_col2.pdf",
width=6, height=4, dpi=300)
# UMAP plot of RMS scores
p <- FeaturePlot(merged_Xietal, features = names(signatures), reduction = "UMAP_no_regression", combine = FALSE, order = TRUE, pt.size = 2, raster=TRUE)
# color palette
#colors populations
col_celltype <- c('#62205FFF', '#D0A8C8FF', '#B6CAC1FF', '#98E2E3FF' ,'#57ADBAFF', '#5F4E3CFF')
names(col_celltype) <- c('Skeletal mesenchymal', 'Myogenic progenitors', 'Myoblasts-myocyte', 'Myoblasts', 'Myocytes', 'Postnatal satellite cells')
## Plots ------------------------------------------------------------
DimPlot(merged_Xietal, reduction = "UMAP_no_regression", group.by = 'timepoint', cols = col_timepoints) + NoAxes()
ggsave("/Volumes/Sara_PhD/scRNAseq_data/output/metadata/dev_muscle/3_UMAP_celltype_col1.pdf",
width=5, height=4, dpi=300)
DimPlot(merged_Xietal, reduction = "UMAP_no_regression", group.by = 'timepoint_aggregate', cols = col_timepoints_aggregate) + NoAxes()
ggsave("/Volumes/Sara_PhD/scRNAseq_data/output/metadata/dev_muscle/3_UMAP_celltype_aggregate_col1.pdf",
width=5, height=4, dpi=300)
DimPlot(merged_Xietal, reduction = "UMAP_no_regression", group.by = 'celltype', cols=col_celltype) + NoAxes()
ggsave("/Volumes/Sara_PhD/scRNAseq_data/output/metadata/dev_muscle/3_UMAP_celltype_col2.pdf",
width=6, height=4, dpi=300)
# color palette
#colors populations
col_celltype <- c('#62205FFF', '#D0A8C8FF', '#DCEAEAFF', '#7CC3C9FF', '#172869FF', '#5F4E3CFF')
names(col_celltype) <- c('Skeletal mesenchymal', 'Myogenic progenitors', 'Myoblasts-myocyte', 'Myoblasts', 'Myocytes', 'Postnatal satellite cells')
DimPlot(merged_Xietal, reduction = "UMAP_no_regression", group.by = 'celltype', cols=col_celltype) + NoAxes()
ggsave("/Volumes/Sara_PhD/scRNAseq_data/output/metadata/dev_muscle/3_UMAP_celltype_col2.pdf",
width=6, height=4, dpi=300)
col_celltype <- c('#62205FFF', '#D0A8C8FF', '#DCEAEAFF', '#7CC3C9FF', '#172869FF', '#C3D878FF')
DimPlot(merged_Xietal, reduction = "UMAP_no_regression", group.by = 'celltype', cols=col_celltype) + NoAxes()
ggsave("/Volumes/Sara_PhD/scRNAseq_data/output/metadata/dev_muscle/3_UMAP_celltype_col2.pdf",
width=6, height=4, dpi=300)
# color palette
#colors populations
col_celltype <- c('#62205FFF', '#D0A8C8FF', '#DCEAEAFF', '#7CC3C9FF', '#172869FF', '#C3D878FF')
names(col_celltype) <- c('Skeletal mesenchymal', 'Myogenic progenitors', 'Myoblasts-myocyte', 'Myoblasts', 'Myocytes', 'Postnatal satellite cells')
# color palette
#colors populations
col_celltype <- c('#62205FFF', '#D0A8C8FF', '#DCEAEAFF', '#7CC3C9FF', '#172869FF', '#C3D878FF')
names(col_celltype) <- c('Skeletal mesenchymal', 'Myogenic progenitors', 'Myoblasts-myocyte', 'Myoblasts', 'Myocytes', 'Postnatal satellite cells')
## Plots ------------------------------------------------------------
DimPlot(merged_Xietal, reduction = "UMAP_no_regression", group.by = 'timepoint', cols = col_timepoints) + NoAxes()
ggsave("/Volumes/Sara_PhD/scRNAseq_data/output/metadata/dev_muscle/3_UMAP_celltype_col1.pdf",
width=5, height=4, dpi=300)
DimPlot(merged_Xietal, reduction = "UMAP_no_regression", group.by = 'timepoint_aggregate', cols = col_timepoints_aggregate) + NoAxes()
ggsave("/Volumes/Sara_PhD/scRNAseq_data/output/metadata/dev_muscle/3_UMAP_celltype_aggregate_col1.pdf",
width=5, height=4, dpi=300)
DimPlot(merged_Xietal, reduction = "UMAP_no_regression", group.by = 'celltype', cols=col_celltype) + NoAxes()
ggsave("/Volumes/Sara_PhD/scRNAseq_data/output/metadata/dev_muscle/3_UMAP_celltype_col2.pdf",
width=6, height=4, dpi=300)
merged_Xietal$celltype <- factor(x = merged_Xietal$celltype,
levels = c("Skeletal mesenchymal", "Myogenic progenitors", "Myoblasts-myocyte", "Myoblasts",  "Myocytes",
"Postnatal satellite cells"))
DimPlot(merged_Xietal, reduction = "UMAP_no_regression", group.by = 'celltype', cols=col_celltype) + NoAxes()
ggsave("/Volumes/Sara_PhD/scRNAseq_data/output/metadata/dev_muscle/3_UMAP_celltype_col2.pdf",
width=6, height=4, dpi=300)
# reorder labels
merged_Xietal$timepoint <- factor(x = merged_Xietal$timepoint,
levels = c("Wk5.0", "Wk6.0" ,  "Wk6.5", "Wk7.0", "Wk7.25",  "Wk7.75" , "Wk9" ,   "Wk12",   "Wk14", "Wk17" ,  "Wk18",
"Yr7",    "Yr11",   "Yr34" ,  "Yr42"))
merged_Xietal$celltype <- factor(x = merged_Xietal$celltype,
levels = c("Skeletal mesenchymal",  "Myogenic progenitors", "Myoblasts-myocyte", "Myoblasts",  "Myocytes",
"Postnatal satellite cells"))
plot_bar(merged_Xietal, merged_Xietal$timepoint, merged_Xietal$celltype, col = col_celltype)
ggsave("/Volumes/Sara_PhD/scRNAseq_data/output/metadata/dev_muscle/4_cell_composition_pop.pdf",
width=8, height=4)
plot_bar(merged_Xietal, merged_Xietal$celltype, merged_Xietal$timepoint, col = col_timepoints)
ggsave("/Volumes/Sara_PhD/scRNAseq_data/output/metadata/dev_muscle/4_cell_composition_timepoints.pdf",
width=4, height=5)
plot_bar(merged_Xietal, merged_Xietal$timepoint_aggregate, merged_Xietal$celltype, col = col_celltype)
ggsave("/Volumes/Sara_PhD/scRNAseq_data/output/metadata/dev_muscle/4_cell_composition_timepoint_aggregate.pdf",
width=6, height=4)
rm(list = ls())
library(dplyr)
library(ggplot2)
library(patchwork)
library(readxl)
library(data.table)
library(ggsankey)
# Set up environment ------------------------------------------------
base_dir <- file.path('/Volumes/Sara_PhD/scRNAseq_data')
output_dir <- file.path(base_dir, 'output/metadata/dev_muscle/distribution')
if (!dir.exists(output_dir)){dir.create(output_dir, recursive = T)}
source(file.path('/Users/sdaniell/Dropbox (Partners HealthCare)/Sara Danielli/Manuscripts/2023 - Meta-data/GITHUB/RMS-metadata/Resources/Plot_style_v2.R'))
# color palette
#colors populations
#col_celltype_pal2 <- c('#C3A016FF', '#C3D878FF', '#58A787FF', '#8EBACDFF', '#246893FF', '#163274FF', '#0C1F4BFF')
#col_celltype_pal0 <- c('#C70E7BFF', '#FC6882FF',  '#A6E000FF','#1BB6AFFF', '#6C6C9DFF', '#172869FF')
#col_celltype_pal0b <- c('#C70E7BFF', '#FC6882FF', '#1BB6AFFF', '#6C6C9DFF', '#172869FF', 'black')
#col_celltype_pal1 <- c('#62205FFF', '#D0A8C8FF', '#DCEAEAFF', '#7CC3C9FF', '#172869FF', '#FBF5A3FF')
col_celltype <- c('#62205FFF', '#D0A8C8FF', '#DCEAEAFF', '#7CC3C9FF', '#172869FF', '#C3D878FF')
#col_celltype_pal3 <- c('#CF5483FF', '#FE8BB2FF', '#B6CAC1FF', '#98E2E3FF' ,'#57ADBAFF', '#5F4E3CFF')
#col_celltype_pal4 <- paletteer::paletteer_d("MoMAColors::Rattner")[1:6]
names(col_celltype) <- c('Skeletal mesenchymal', 'Myogenic Progenitors', 'Myoblast-Myocytes', 'Myoblasts', 'Myocytes', 'Postnatal satellite cells')
col_timepoints <- c('#9E0142FF',    '#FDAE61FF',   '#FFFFBFFF',   '#ABDDA4FF', '#66C2A5FF', '#3288BDFF', '#5E4FA2FF')
names(col_timepoints) <- c('Wk5-6', 'Wk6-7', 'Wk7-8' ,'Wk9' ,'Wk12-14', 'Wk17-18', 'Postnatal')
# Load metadata ------------------------------------------------
P3F1 <- readRDS(file.path(base_dir, "output/metadata/dev_muscle/metadata/P3F1 FP-RMS metadata.rds"))
P7F1 <- readRDS(file.path(base_dir, "output/metadata/dev_muscle/metadata/P7F1 FP-RMS metadata.rds"))
FNRMS <- readRDS(file.path(base_dir, "output/metadata/dev_muscle/metadata/FN-RMS metadata.rds"))
metadata <- list(FNRMS, P7F1, P3F1)
# subset to columns of interest
metadata_red <- list()
for (i in seq_along(metadata)){
metadata_red[[i]] <- metadata[[i]][ ,c('name', 'SingleR.cell.labels', 'SingleR.labels')]
}
# concatenate
metadata <- rbind(metadata_red[[1]], metadata_red[[2]], metadata_red[[3]])
desired_order <- c('20696','21202', '29806',
'eRMS-1.1','eRMS-1.2',  'eRMS-2.1', 'eRMS-2.2',
'eRMS-3.2','eRMS-4',  'eRMS-8.1', 'eRMS-8.2',
'eRMS-8.3', 'Mast111','Mast139',  'Mast139_SC',
'Mast39',   'Mast85_r1','Mast85_r2',
'Mast85_r2_SC', 'MSK74711', 'RD', 'SJRHB000026_R2',  'SJRHB000026_R3',  'SJRHB000026_X1',
'SJRHB000026_X2', 'SJRHB010927_D1', 'SJRHB010927_X1',
'SJRHB010928_R1', 'SJRHB010928_X1',  'SJRHB011_D',
'SJRHB011_X', 'SJRHB012_R', 'SJRHB012_S', 'SJRHB012_Y',
'SJRHB012_Z', 'SJRHB012405_D1', 'SJRHB012405_X1',  'SJRHB013758_D1',
'SJRHB013758_D2', 'SJRHB013758_X1', 'SJRHB013758_X2',  'SJRHB030680_R1',
'SJRHB030680_X1', 'SJRHB049189_D1', 'SJRHB049189_X1',
'Mast95', 'MSK72117', 'MSK72117_SC', #P7F1
'SJRHB010468_D1',  'SJRHB010468_X1', 'SJRHB013757_D2', 'SJRHB013757_X1', #P7F1
'SJRHB031320_D1',   'SJRHB031320_X1', 'SJRHB046156_A1', 'SJRHB046156_X1', #P7F1
'20082',  'aRMS-1',  'aRMS-2', 'aRMS-3',  #P3F1
'aRMS-4',  'aRMS-5', 'KFR', 'Mast118', #P3F1
'MSK82489', 'Rh4',  'Rh41',   'RMS',
'SJRHB013759_A1',  'SJRHB013759_A2',
'SJRHB013759_X14','SJRHB013759_X15'
)
# Calculate frequency
metadata_freq <- metadata %>%
dplyr::group_by(name, SingleR.cell.labels) %>%
dplyr::summarise(n = n()) %>%
dplyr::mutate(freq = n / sum(n))
metadata_freq
# Plot
metadata_freq$name <- factor(metadata_freq$name, levels = desired_order)
metadata_freq$SingleR.cell.labels <- factor(metadata_freq$SingleR.cell.labels,
levels = c('Skeletal mesenchymal', 'Myogenic Progenitors', 'Myoblast-Myocytes', 'Myoblasts', 'Myocytes', 'Postnatal satellite cells'))
gg_barplot_style(metadata_freq, col_celltype_pal0b) +
geom_bar(mapping = aes(x = name, y = freq, fill = SingleR.cell.labels), stat = "identity", width = 0.9, color="black") +
guides(fill = guide_legend(ncol = 1, title = 'Cell Type')) +
labs(x = 'Sample', y = 'Percentage')
gg_barplot_style(metadata_freq, col_celltype) +
geom_bar(mapping = aes(x = name, y = freq, fill = SingleR.cell.labels), stat = "identity", width = 0.9, color="black") +
guides(fill = guide_legend(ncol = 1, title = 'Cell Type')) +
labs(x = 'Sample', y = 'Percentage')
ggsave(file.path(output_dir, "1_Barplot_composition_RMS_pal0b.pdf"), width=18, height=4, dpi=300)
# Calculate frequency
metadata_freq <- metadata %>%
dplyr::group_by(name, SingleR.labels) %>%
dplyr::summarise(n = n()) %>%
dplyr::mutate(freq = n / sum(n))
metadata_freq
# Plot
metadata_freq$name <- factor(metadata_freq$name, levels = desired_order)
gg_barplot_style(metadata_freq, col_timepoints) +
geom_bar(mapping = aes(x = name, y = freq, fill = SingleR.labels), stat = "identity", width = 0.9, color="black") +
guides(fill = guide_legend(ncol = 1, title = 'Cell Type')) +
labs(x = 'Sample', y = 'Percentage')
ggsave(file.path(output_dir, "2_Barplot_composition_RMS_timepoints.pdf"), width=18, height=4, dpi=300)
# Load .rds objects to plot alluvial plots ------------------------------------------------
P7F1_sc <- readRDS(file.path(base_dir, "write/FPRMS_PAX7FOXO1_final_20240130.rds"))
P3F1_sc <- readRDS(file.path(base_dir, "write/FPRMS_PAX3FOXO1_final_20240130.rds"))
FNRMS_sc <- readRDS(file.path(base_dir, "write/FNRMS_final_20240130.rds"))
# add SingleR label
P7F1_sc <- AddMetaData(P7F1_sc, P7F1, col.name = 'SingleR.cell.labels')
P3F1_sc <- AddMetaData(P3F1_sc, P3F1, col.name = 'SingleR.cell.labels')
FNRMS_sc <- AddMetaData(FNRMS_sc, FNRMS, col.name = 'SingleR.cell.labels')
# extract metadata for Sankey plots
P7F1_metadata <- P7F1_sc@meta.data[ , c('Cluster assignment', 'SingleR.cell.labels')]
P3F1_metadata <- P3F1_sc@meta.data[ , c('Cluster assignment', 'SingleR.cell.labels')]
FNRMS_metadata <- FNRMS_sc@meta.data[ , c('Cluster assignment', 'SingleR.cell.labels')]
rm(P7F1_sc, P3F1_sc, FNRMS_sc)
metadata <- list(P7F1_metadata, P3F1_metadata, FNRMS_metadata)
names(metadata) <- c('PAX7FOXO1', 'PAX3FOXO1', 'FNRMS')
df <- list()
for (i in seq_along(metadata)){
# transform data for plot
df[[i]] <- metadata[[i]] %>%
make_long(`Cluster assignment`, SingleR.cell.labels)
# Reorder factors
desired_order_node <- rev(c('Skeletal mesenchymal', 'Myogenic Progenitors', 'Myoblasts',
'Myoblast-Myocytes',  'Myocytes', 'Postnatal satellite cells',
'Progenitor', 'Proliferative', 'Ground', 'Differentiated',
'Neuronal', 'Apoptosis', 'IFN'))
df[[i]]$node <- factor(df[[i]]$node,levels = desired_order_node)
df[[i]]$next_node <- factor(df[[i]]$next_node,levels = desired_order_node)
}
# Chart
for (i in seq_along(metadata)){
ggplot(df[[i]], aes(x = x
, next_x = next_x
, node = node
, next_node = next_node
, fill = factor(node)
, label = node)
) +geom_sankey(flow.alpha = 0.3
, node.color = "black"
,show.legend = FALSE) +
geom_sankey_label(size = 3.5, color = 1, fill = "white",
hjust = -0.1) +
theme_bw() +
theme(legend.position = "none",
axis.title = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank()) +
scale_fill_manual(values = c(col_cluster_names_aggregate, col_celltype)) +
labs(title = "FN-RMS")
ggsave(file.path(output_dir, paste0("3_SankeyPlot_", names(metadata)[i], ".pdf")), width=5, height=5)
}
# Plot UMAP plots with SingleR labels -----------------------------------------
p1 <- DimPlot(FNRMS, reduction = "umap_rpca", group.by = 'SingleR.cell.labels', cols = col2, label=F, pt.size = 3, raster=TRUE, raster.dpi = c(1012, 1012)) + NoLegend() + ggtitle('FN-RMS')
FNRMS
# Plot UMAP plots with SingleR labels -----------------------------------------
p1 <- DimPlot(FNRMS_sc, reduction = "umap_rpca", group.by = 'SingleR.cell.labels', cols = col2, label=F, pt.size = 3, raster=TRUE, raster.dpi = c(1012, 1012)) + NoLegend() + ggtitle('FN-RMS')
# Plot UMAP plots with SingleR labels -----------------------------------------
p1 <- DimPlot(FNRMS_sc, reduction = "umap_rpca", group.by = 'SingleR.cell.labels', cols = col2, label=F, pt.size = 3, raster=TRUE, raster.dpi = c(1012, 1012)) + NoLegend() + ggtitle('FN-RMS')
# Load .rds objects to plot alluvial plots ------------------------------------------------
P7F1_sc <- readRDS(file.path(base_dir, "write/FPRMS_PAX7FOXO1_final_20240130.rds"))
P3F1_sc <- readRDS(file.path(base_dir, "write/FPRMS_PAX3FOXO1_final_20240130.rds"))
FNRMS_sc <- readRDS(file.path(base_dir, "write/FNRMS_final_20240130.rds"))
# add SingleR label
P7F1_sc <- AddMetaData(P7F1_sc, P7F1, col.name = 'SingleR.cell.labels')
P3F1_sc <- AddMetaData(P3F1_sc, P3F1, col.name = 'SingleR.cell.labels')
FNRMS_sc <- AddMetaData(FNRMS_sc, FNRMS, col.name = 'SingleR.cell.labels')
# Plot UMAP plots with SingleR labels -----------------------------------------
p1 <- DimPlot(FNRMS_sc, reduction = "umap_rpca", group.by = 'SingleR.cell.labels', cols = col2, label=F, pt.size = 3, raster=TRUE, raster.dpi = c(1012, 1012)) + NoLegend() + ggtitle('FN-RMS')
# Plot UMAP plots with SingleR labels -----------------------------------------
p1 <- DimPlot(FNRMS_sc, reduction = "umap_rpca", group.by = 'SingleR.cell.labels', cols = col_celltype, label=F, pt.size = 3, raster=TRUE, raster.dpi = c(1012, 1012)) + NoLegend() + ggtitle('FN-RMS')
p1
# Plot UMAP plots with SingleR labels -----------------------------------------
p1 <- DimPlot(FNRMS_sc, reduction = "umap_rpca", group.by = 'SingleR.cell.labels', cols = col_celltype,
label=T, pt.size = 3, raster=TRUE, raster.dpi = c(1012, 1012)) + NoLegend() + ggtitle('FN-RMS')
p1
# Plot UMAP plots with SingleR labels -----------------------------------------
p1 <- DimPlot(FNRMS_sc, reduction = "umap_rpca", group.by = 'SingleR.cell.labels', cols = col_celltype,
label=F, pt.size = 3, raster=TRUE, raster.dpi = c(1012, 1012)) + NoLegend() + ggtitle('FN-RMS')
p2 <- DimPlot(P7F1_sc, reduction = "umap_rpca", group.by = 'SingleR.cell.labels', cols = col_celltype,
label=F, pt.size = 3, raster=TRUE, raster.dpi = c(1012, 1012)) + NoLegend() + ggtitle('FP-RMS (PAX7::FOXO1)')
p3 <- DimPlot(P3F1_sc, reduction = "umap_rpca", group.by = 'SingleR.cell.labels', cols = col_celltype,
label=F, pt.size = 3, raster=TRUE, raster.dpi = c(1012, 1012)) + ggtitle('FP-RMS (PAX3::FOXO1')
p1| p2 | p3
ggsave(output_dir, "4_UMAP_cell_projections.pdf", width=12.5, height=4, dpi=300)
ggsave(file.path(output_dir, "4_UMAP_cell_projections.pdf"), width=12.5, height=4, dpi=300)
rm(list = ls())
library(dplyr)
library(Seurat)
library(ggplot2)
library(patchwork)
library(readxl)
library(writexl)
library(data.table)
library(viridis)
library(future)
library(paletteer)
library(SeuratObject)
library(future)
#library(clustree)
plan("multicore", workers = 4)
base_dir <- '/Volumes/Sara_PhD/scRNAseq_data'
source(file.path(base_dir, "codes/MANUSCRIPT_INTEGRATION/metadata/FINAL/Functions.R"))
analysis_dir <- file.path(base_dir, 'output/metadata/Patel_Danielli_Langenau/RPCA_name/P3F1analysis')
if (!dir.exists(analysis_dir)){dir.create(analysis_dir, recursive = T)}
rm(list = ls())
library(dplyr)
library(Seurat)
library(ggplot2)
library(patchwork)
library(readxl)
library(writexl)
library(data.table)
library(viridis)
library(future)
library(paletteer)
library(SeuratObject)
#library(SCpubr)
library(readxl)
library(ggpubr)
library(cowplot)
base_dir <- '/Volumes/Sara_PhD/scRNAseq_data'
resource_dir <- file.path('/Users/sdaniell/Dropbox (Partners HealthCare)/Sara Danielli/Manuscripts/2023 - Meta-data/GITHUB/RMS-metadata/Resources')
source(file.path(base_dir, "codes/MANUSCRIPT_INTEGRATION/metadata/FINAL/Functions.R"))
source(file.path(resource_dir, "Plot_style_v2.R"))
genelist_dir <- file.path(base_dir, 'list_final')
analysis_dir <- file.path(base_dir, 'output/metadata/Patel_Danielli_Langenau/RPCA_name/P3F1analysis')
if (!dir.exists(analysis_dir)){dir.create(analysis_dir, recursive = T)}
P3F1 <- readRDS(file.path(base_dir, "write/FPRMS_PAX3FOXO1_final_20240130.rds"))
# Violin plot neuronal markers
Vln_scores <- c("TBXT", "SOX2")
names(Vln_scores) <- c("TBXT", "SOX2")
?VlnPlot
P3F1
for (a in 1:length(Vln_scores)) {
VlnPlot(P3F1, features = Vln_scores[[a]], assay = 'RNA', group.by = 'Cluster assignment', pt.size=0,  cols = col_cluster_names_aggregate)
ggsave(file.path(analysis_dir, paste0("20_Vln_plot_scores_",names(Vln_scores)[a],".pdf")), width=5, height=5, dpi=300)
}
rm(list = ls())
library(dplyr)
library(Seurat)
library(ggplot2)
library(patchwork)
library(readxl)
library(writexl)
library(data.table)
library(viridis)
library(future)
library(paletteer)
library(SeuratObject)
library(SCpubr)
genelist_dir <- file.path(base_dir, 'list_final')
analysis_dir <- file.path(base_dir, 'output/metadata/Patel_Danielli_Langenau/RPCA_name/P7F1analysis')
if (!dir.exists(analysis_dir)){dir.create(analysis_dir, recursive = T)}
#library(SCpubr)
library(readxl)
base_dir <- '/Volumes/Sara_PhD/scRNAseq_data'
resource_dir <- file.path('/Users/sdaniell/Dropbox (Partners HealthCare)/Sara Danielli/Manuscripts/2023 - Meta-data/GITHUB/RMS-metadata/Resources')
source(file.path(base_dir, "codes/MANUSCRIPT_INTEGRATION/metadata/FINAL/Functions.R"))
source(file.path(resource_dir, "Plot_style_v2.R"))
genelist_dir <- file.path(base_dir, 'list_final')
analysis_dir <- file.path(base_dir, 'output/metadata/Patel_Danielli_Langenau/RPCA_name/P7F1analysis')
P7F1 <- readRDS(file.path(base_dir, "write/FPRMS_PAX7FOXO1_final_20240130.rds"))
# Violin plot neuronal markers
Vln_scores <- c("TBXT", "SOX2")
names(Vln_scores) <- c("TBXT", "SOX2")
for (a in 1:length(Vln_scores)) {
VlnPlot(P7F1, features = Vln_scores[[a]], assay = 'RNA', group.by = 'Cluster assignment', pt.size=0,  cols = col_cluster_names_aggregate)
ggsave(file.path(analysis_dir, paste0("20_Vln_plot_scores_",names(Vln_scores)[a],".pdf")), width=5, height=5, dpi=300)
}
rm(list = ls())
library(dplyr)
library(Seurat)
library(ggplot2)
library(patchwork)
library(readxl)
library(writexl)
library(data.table)
library(viridis)
library(future)
library(paletteer)
library(SeuratObject)
library(SCpubr)
#library(SCpubr)
library(readxl)
library(ggpubr)
library(cowplot)
base_dir <- '/Volumes/Sara_PhD/scRNAseq_data'
resource_dir <- file.path('/Users/sdaniell/Dropbox (Partners HealthCare)/Sara Danielli/Manuscripts/2023 - Meta-data/GITHUB/RMS-metadata/Resources')
source(file.path(base_dir, "codes/MANUSCRIPT_INTEGRATION/metadata/FINAL/Functions.R"))
source(file.path(resource_dir, "Plot_style_v2.R"))
genelist_dir <- file.path(base_dir, 'list_final')
analysis_dir <- file.path(base_dir, 'output/metadata/Patel_Danielli_Langenau/RPCA_name/ERMSanalysis')
if (!dir.exists(analysis_dir)){dir.create(analysis_dir, recursive = T)}
FNRMS <- readRDS(file.path(base_dir, "write/FNRMS_final_20240130.rds"))
# Violin plot neuronal markers
Vln_scores <- c("TBXT", "SOX2")
names(Vln_scores) <- c("TBXT", "SOX2")
for (a in 1:length(Vln_scores)) {
VlnPlot(FNRMS, features = Vln_scores[[a]], assay = 'RNA', group.by = 'Cluster assignment', pt.size=0,  cols = col_cluster_names_aggregate)
ggsave(file.path(analysis_dir, paste0("20_Vln_plot_scores_",names(Vln_scores)[a],".pdf")), width=5, height=5, dpi=300)
}
